basePath: /api
definitions:
  web.ProjectCreateRequest:
    properties:
      confidence:
        maximum: 100
        minimum: 0
        type: number
      description:
        type: string
      name:
        type: string
      progress:
        maximum: 100
        minimum: 0
        type: number
      trend:
        enum:
        - up
        - down
        - stable
        type: string
      user_id:
        type: string
    required:
    - name
    - user_id
    type: object
  web.ProjectResponse:
    properties:
      confidence:
        type: number
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      progress:
        type: number
      trend:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  web.ProjectUpdateRequest:
    properties:
      confidence:
        maximum: 100
        minimum: 0
        type: number
      description:
        type: string
      id:
        type: string
      name:
        type: string
      progress:
        maximum: 100
        minimum: 0
        type: number
      trend:
        enum:
        - up
        - down
        - stable
        type: string
    required:
    - id
    - name
    type: object
  web.TaskCreateRequest:
    properties:
      bottleneck:
        type: string
      deliverable:
        type: string
      difficulty_level:
        type: string
      effort:
        type: integer
      priority:
        enum:
        - low
        - medium
        - high
        type: string
      project_id:
        type: string
      status:
        enum:
        - todo
        - in-progress
        - completed
        type: string
      title:
        type: string
    required:
    - effort
    - project_id
    - title
    type: object
  web.TaskResponse:
    properties:
      bottleneck:
        type: string
      created_at:
        type: string
      deliverable:
        type: string
      difficulty_level:
        type: string
      effort:
        type: integer
      id:
        type: string
      priority:
        type: string
      project_id:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  web.TaskUpdateRequest:
    properties:
      bottleneck:
        type: string
      deliverable:
        type: string
      difficulty_level:
        type: string
      effort:
        type: integer
      priority:
        enum:
        - low
        - medium
        - high
        type: string
      status:
        enum:
        - todo
        - in-progress
        - completed
        type: string
      title:
        type: string
    required:
    - effort
    - priority
    - status
    - title
    type: object
  web.TokenResponse:
    properties:
      refresh_token:
        type: string
      token:
        type: string
    type: object
  web.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  web.UserRegisterRequest:
    properties:
      email:
        type: string
      full_name:
        description: tambahkan ini
        type: string
      password:
        type: string
      role:
        enum:
        - SE
        - SCE
        type: string
    required:
    - email
    - full_name
    - password
    - role
    type: object
  web.UserResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  web.UserUpdateRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      password:
        type: string
      role:
        enum:
        - SE
        - SCE
        type: string
    required:
    - id
    type: object
  web.WebResponse:
    properties:
      code:
        type: integer
      data: {}
      status:
        type: string
    type: object
host: localhost:3001
info:
  contact: {}
  description: API untuk manajemen users dengan PostgreSQL.
  title: User API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/web.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/web.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.WebResponse'
      summary: Login user
      tags:
      - Users
  /logout:
    post:
      consumes:
      - application/json
      description: Invalidate refresh token
      parameters:
      - description: Refresh token
        in: header
        name: X-Refresh-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Logout berhasil
          schema:
            $ref: '#/definitions/web.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Users
  /projects:
    get:
      consumes:
      - application/json
      description: Get all projects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/web.ProjectResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Get all projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create new project with the input payload
      parameters:
      - description: Create project request
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/web.ProjectCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ProjectResponse'
      security:
      - BearerAuth: []
      summary: Create new project
      tags:
      - projects
  /projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete project by ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: response with code and status
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Get project by ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ProjectResponse'
      security:
      - BearerAuth: []
      summary: Get project by ID
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update project by ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Update project request
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/web.ProjectUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ProjectResponse'
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - projects
  /projects/user/{userId}:
    get:
      consumes:
      - application/json
      description: Get all projects for a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/web.ProjectResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Get projects by user ID
      tags:
      - projects
  /refresh:
    post:
      consumes:
      - application/json
      description: Generate a new JWT token using refresh token
      parameters:
      - description: Refresh token
        in: header
        name: X-Refresh-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/web.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Refresh JWT token
      tags:
      - Users
  /tasks:
    get:
      consumes:
      - application/json
      description: Get all tasks in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/web.TaskResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Get all tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task with the provided data
      parameters:
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/web.TaskCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.TaskResponse'
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - tasks
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Get a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.TaskResponse'
      security:
      - BearerAuth: []
      summary: Get a task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task with the provided data
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/web.TaskUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.TaskResponse'
      security:
      - BearerAuth: []
      summary: Update a task
      tags:
      - tasks
  /tasks/project/{projectId}:
    get:
      consumes:
      - application/json
      description: Get all tasks for a specific project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/web.TaskResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Get tasks by project ID
      tags:
      - tasks
  /users:
    get:
      description: Get all users without pagination
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.WebResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/web.UserResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with email and password
      parameters:
      - description: User payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/web.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/web.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebResponse'
      summary: Register a new user
      tags:
      - Users
  /users/{userId}:
    delete:
      description: Soft delete a user by UUID
      parameters:
      - description: User ID (UUID)
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebResponse'
        "400":
          description: Invalid UUID
          schema:
            $ref: '#/definitions/web.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      description: Get a single user by UUID
      parameters:
      - description: User ID (UUID)
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/web.UserResponse'
              type: object
        "400":
          description: Invalid UUID
          schema:
            $ref: '#/definitions/web.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user by UUID
      parameters:
      - description: User ID (UUID)
        in: path
        name: userId
        required: true
        type: string
      - description: User payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/web.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.WebResponse'
            - properties:
                data:
                  $ref: '#/definitions/web.UserResponse'
              type: object
        "400":
          description: Invalid UUID or Bad Request
          schema:
            $ref: '#/definitions/web.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
